{
    "C++ Boilerplate": {
        "prefix": "boilerplate",
        "body": [
            "// In the name of Allah, the Most Gracious, the Most Merciful",
            "// C: FardinMahadi",
            "",
            "/*  ______  __      __  ______  ____",
            "   / ____/ /  \\    / / / |_) ) /   |",
            "  / /___  / /\\ \\  / / / /--<  /_/| |",
            " / ____/ / /  \\ \\/ / / /_)  )   _| |_",
            "/_/     /_/    \\__/ /_/____/   |_____| */",
            "",
            "#include <bits/stdc++.h>",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "#include <ext/pb_ds/assoc_container.hpp>",
            "",
            "using namespace __gnu_pbds;",
            "using namespace std;",
            "",
            "template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
            "",
            "#define sp                  ' '",
            "#define nl                  '\\n'",
            "#define F                   first",
            "#define S                   second",
            "#define ll                  long long",
            "#define pb                  push_back",
            "#define gcd(x,y)            __gcd(x,y)",
            "#define lcm(x,y)            y*x/__gcd(x,y)",
            "#define no                  cout << \"NO\" << nl",
            "#define yes                 cout << \"YES\" << nl",
            "#define all(a)              (a.begin()),(a.end())",
            "#define SUM(a)              accumulate(all(a),0LL)",
            "#define cinv(v)             for(auto &i : v) cin >> i",
            "#define coutv(v)            for(auto &i : v) cout << i << sp",
            "#define fixedpoint(x)       cout << fixed << setprecision(x)",
            "#define UNIQUE(X)           (X).erase(unique(all(X)),(X).end())",
            "#define print(v)            for(auto x : v) cout << x << \" \"; cout << nl",
            "#define SORT_UNIQUE(c)      (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))",
            "",
            "const double PI = acos(-1);",
            "const int N = 1e5 + 5;",
            "int n, m, a[N][N];",
            "",
            "void Solve(int tc) {",
            "    $1",
            "}",
            "",
            "int main() {",
            "    ios::sync_with_stdio(0);",
            "    cin.tie(0);cout.tie(0);",
            "    ",
            "    int t = 1;",
            "    cin >> t;",
            "    for (int tc = 1; tc <= t; tc++) Solve(tc);",
            "    ",
            "    return 0;",
            "}"
        ],
        "description": "Template for problems with multiple test cases, includes case number"
    },
    "C++ Split Function": {
        "prefix": "split",
        "body": [
            "vector<string> split(const string &str, const string &delimiter)",
            "{",
            "    vector<string> tokens;",
            "    size_t start = 0, end, delimLength = delimiter.length();",
            "   ",
            "    while ((end = str.find(delimiter, start)) != string::npos)",
            "    {",
            "        tokens.push_back(str.substr(start, end - start));",
            "        start = end + delimLength;",
            "    }",
            "    tokens.push_back(str.substr(start));",
            "    return tokens;",
            "   ",
            "}"
        ],
        "description": "Function to split a string based on a given delimiter"
    },
    "C++ function to find lcm": {
        "prefix": "lcm",
        "body": [
            "ll lcm(ll a, ll b) {",
            "    return (a / __gcd(a, b)) * b;",
            "}"
        ],
        "description": "Efficient and overflow-safe LCM function for two long long numbers."
    },
    "C++ Boilerplate for tutorial": {
        "prefix": "tutBoilerplate",
        "body": [
            "// In the name of Allah, the Most Gracious, the Most Merciful",
            "// C: FardinMahadi",
            "",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int main() {",
            "    $1",
            "    ",
            "    return 0;",
            "}"
        ],
        "description": "Template for problems with multiple test cases, includes case number"
    },
    "C++ Merge Sort Template": {
        "prefix": "mergeSort",
        "body": [
            "void merge(vector<int>& arr, int low, int mid, int high) {",
            "    vector<int> temp(high - low + 1);",
            "    int i = low, j = mid + 1, k = 0;",
            "    while (i <= mid && j <= high) {",
            "        if (arr[i] <= arr[j]) temp[k++] = arr[i++];",
            "        else temp[k++] = arr[j++];",
            "    }",
            "    while (i <= mid) temp[k++] = arr[i++];",
            "    while (j <= high) temp[k++] = arr[j++];",
            "    for (int idx = 0; idx < temp.size(); idx++) {",
            "        arr[low + idx] = temp[idx];",
            "    }",
            "}",
            "",
            "void mergeSort(vector<int>& arr, int low, int high) {",
            "    if (low < high) {",
            "        int mid = low + (high - low) / 2;",
            "        mergeSort(arr, low, mid);",
            "        mergeSort(arr, mid + 1, high);",
            "        merge(arr, low, mid, high);",
            "    }",
            "}"
        ],
        "description": "Implementation of Merge Sort algorithm for vectors"
    },
    "C++ Grid Traversal Helper": {
        "prefix": "gridHelper",
        "body": [
            "int dx[] = {-1, 0, +1, 0};",
            "int dy[] = {0, -1, 0, +1};",
            "",
            "inline bool in(int i, int j) {",
            "    return (0 <= i && i < n && 0 <= j && j < m);",
            "}"
        ],
        "description": "Helper functions for grid/matrix traversal with direction arrays and boundary checking"
    },
    "C++ function to find gcd": {
        "prefix": "gcd",
        "body": [
            "ll gcd(ll a, ll b) {",
            "    return b == 0 ? a : gcd(b, a % b);",
            "}"
        ],
        "description": "Recursive GCD function for two long long numbers."
    }
}